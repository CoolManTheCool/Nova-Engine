name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true # Ensure submodules are checked out
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libvulkan-dev \
          vulkan-tools \
          libglfw3 \
          libglfw3-dev \
          libglm-dev \
          # Add any other dependencies here

    - name: Configure CMake on Linux
      if: runner.os == 'Linux'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Build on Linux
      if: runner.os == 'Linux'
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Install Dependencies on Windows
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --version 3.23.2
        choco install vulkan-sdk --version 1.3.204.0
        # Add any other dependencies here

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Build on Windows
      if: runner.os == 'Windows'
      run: |
        build.bat # Create this script for Windows builds if you haven't

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ matrix.build_type }}
